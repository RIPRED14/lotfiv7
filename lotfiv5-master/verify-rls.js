// Script pour v√©rifier si les op√©rations d'√©criture et lecture anonymes sont autoris√©es
import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const SUPABASE_URL = "https://bkdcbrnfzgnafjwnryme.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJrZGNicm5memduYWZqd25yeW1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU2ODA1MTAsImV4cCI6MjA2MTI1NjUxMH0.cdzP9f_Bg1TlrBs-v1DsOb5Iv-tfK0KURPwZn1hwYMU";

// Cr√©er le client
const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// G√©n√©rer un ID de test unique
const testId = `TEST-${Date.now()}`;

// Tests s√©quentiels pour v√©rifier les diff√©rentes op√©rations
async function runTests() {
  console.log("üîç V√âRIFICATION DES PERMISSIONS RLS SUR SUPABASE");
  console.log("------------------------------------------------");
  
  // Test 1: V√©rifier la lecture (SELECT)
  console.log("\nüìñ TEST 1: Lecture (SELECT)");
  try {
    const { data: selectData, error: selectError } = await supabase
      .from('samples')
      .select('*')
      .limit(2);
    
    if (selectError) {
      console.error("‚ùå ERREUR: Impossible de lire les donn√©es");
      console.error(selectError);
    } else {
      console.log("‚úÖ SUCC√àS: Lecture autoris√©e");
      console.log(`   ${selectData.length} enregistrements trouv√©s`);
      if (selectData.length > 0) {
        console.log(`   Premier enregistrement: ${selectData[0].number} - ${selectData[0].product}`);
      }
    }
  } catch (err) {
    console.error("‚ùå EXCEPTION:", err);
  }
  
  // Test 2: V√©rifier l'√©criture (INSERT)
  console.log("\nüìù TEST 2: √âcriture (INSERT)");
  try {
    const newSample = {
      number: testId,
      product: 'Test RLS Permissions',
      smell: 'A',
      texture: 'B',
      taste: 'A',
      aspect: 'A',
      ready_time: '10:00',
      brand: 'Test Brand'
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from('samples')
      .insert(newSample)
      .select();
    
    if (insertError) {
      console.error("‚ùå ERREUR: Impossible d'ins√©rer des donn√©es");
      console.error(insertError);
    } else {
      console.log("‚úÖ SUCC√àS: Insertion autoris√©e");
      console.log(`   √âchantillon ins√©r√©: ${insertData[0].number}`);
    }
  } catch (err) {
    console.error("‚ùå EXCEPTION:", err);
  }
  
  // Test 3: V√©rifier la mise √† jour (UPDATE)
  console.log("\nüîÑ TEST 3: Mise √† jour (UPDATE)");
  try {
    const { data: updateData, error: updateError } = await supabase
      .from('samples')
      .update({ product: 'Test RLS Permissions (Updated)' })
      .eq('number', testId)
      .select();
    
    if (updateError) {
      console.error("‚ùå ERREUR: Impossible de mettre √† jour des donn√©es");
      console.error(updateError);
    } else {
      console.log("‚úÖ SUCC√àS: Mise √† jour autoris√©e");
      console.log(`   √âchantillon mis √† jour: ${updateData[0].number} - ${updateData[0].product}`);
    }
  } catch (err) {
    console.error("‚ùå EXCEPTION:", err);
  }
  
  // Test 4: V√©rifier la suppression (DELETE)
  console.log("\nüóëÔ∏è TEST 4: Suppression (DELETE)");
  try {
    const { error: deleteError } = await supabase
      .from('samples')
      .delete()
      .eq('number', testId);
    
    if (deleteError) {
      console.error("‚ùå ERREUR: Impossible de supprimer des donn√©es");
      console.error(deleteError);
    } else {
      console.log("‚úÖ SUCC√àS: Suppression autoris√©e");
      console.log(`   √âchantillon supprim√©: ${testId}`);
    }
  } catch (err) {
    console.error("‚ùå EXCEPTION:", err);
  }
  
  // R√©sum√© des tests
  console.log("\nüìä R√âSUM√â DES TESTS");
  console.log("------------------------------------------------");
  console.log("Ces tests v√©rifient si votre configuration RLS permet:");
  console.log("1. La lecture des donn√©es (SELECT)");
  console.log("2. L'insertion de nouvelles donn√©es (INSERT)");
  console.log("3. La mise √† jour des donn√©es existantes (UPDATE)");
  console.log("4. La suppression des donn√©es (DELETE)");
  console.log("\nSi tous les tests ont pass√© avec succ√®s (‚úÖ), cela signifie que votre");
  console.log("configuration est correcte pour permettre des op√©rations anonymes.");
}

// Ex√©cuter les tests
runTests()
  .then(() => {
    console.log("\n‚úÖ V√©rification termin√©e");
  })
  .catch(err => {
    console.error("\n‚ùå Erreur lors de la v√©rification:", err);
  }); 